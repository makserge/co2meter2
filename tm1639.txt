http://arduino.ru/forum/proekty/korpus-ot-drs-8300-v-arduino-proektakh
https://github.com/BlockThor/TM1628

#include "TM1639.h"

// IO macro definition of tm1639
#define tm1639_stb_dr LATA3
#define tm1639_clk_dr LATA4
#define tm1639_dio_dr LATA5


// Bit address, a total of 8 addresses, each address inside the 1-byte data on behalf of 8 LED lights on or off
#define const_dig_addr0 0xc0
#define const_dig_addr1 0xc2
#define const_dig_addr2 0xc4
#define const_dig_addr3 0xc6
#define const_dig_addr4 0xc8
#define const_dig_addr5 0xca
#define const_dig_addr6 0xcc
#define const_dig_addr7 0xce


// Nixie tube or LED light display brightness level
# Define const_level_off 0x80 // the lowest level, the darkest
#define const_level_1 0x88
#define const_level_2 0x89
# Define const_level_4 0x8a / / This procedure to take this level of brightness
#define const_level_10 0x8b
#define const_level_11 0x8c
#define const_level_12 0x8d
#define const_level_13 0x8e
# Define const_level_14 0x8f / / the highest level, the brightest

       
#define const_auto_add_addr 0x40 / / use the address automatically add a way to write video memory


void write_byte_tm1639 (unsigned char tm1639_byte); // write a byte of data into tm1639
                     
void display_tm1639 (unsigned char dig_addr, unsigned char dig_data, unsigned char dig_level); // Display 8 LED lights or one digital tube
// where dig_addr is the address, dig_data is the address data, and dig_level is the brightness

void display_drive (); // Nixie tube driver, on the while (1) loop of the main function

unsigned char number_left1 = 0; / / left of the first digital display content
unsigned char number_left2 = 0; / / left the first two digital display content
unsigned char number_left3 = 0; / / left of the first three digital display content
unsigned char number_left4 = 0; / / left fourth digital display content
unsigned char number_left5 = 0; / / left the first five digital tube display
unsigned char number_left6 = 0; / / left 6 digital display content
unsigned char number_left7 = 0; / / left 7 th digital display
unsigned char number_left8 = 0; / / left of the first eight digital display content


unsigned char led_update = 0; / / update display variable, equal to 1 will perform an update Show digital tube program

unsigned char number_temp [8]; // The intermediate variable about to update the display

const unsigned char number_table [] = // digital tube font conversion table
{
0x3F, // 0
0x06, // 1
0x5B, // 2
0x4F, // 3
0x66, // 4
0x6D, // 5
0x7D, // 6
0x07, // 7
0x7F, // 8
0x6F, // 9
};


// main program
main ()
{
    ADCON0 = 0x00;
    ADCON1 = 0x0f; // All are digital signals
    ADCON2 = 0xa1; // Right-justified
    RBPU = 0; // Pull-up resistor
    SSPEN = 0;



    TRISA3 = 0; // one of the three driver IOs for TM1639
    TRISA4 = 0; // One of the three driver IOs for TM1639
    TRISA5 = 0; // One of the three driver IOs for TM1639


    number_left1 = 1; // The first digit on the left shows "1"
    number_left2 = 2; / / left of the first two digital display "2"
    number_left3 = 3; // The third digit on the left shows "3"
    number_left4 = 4; / / left fourth digital display "4"
    number_left5 = 5; / / left fifth digital display "5"
    number_left6 = 6; / / left sixth digital display "6"
    number_left7 = 7; / / left of the first seven digital display "7"
    number_left8 = 8; / / left of the first eight digital display "8"

    
    led_update = 1; // update display



   while (1)
   {
       CLRWDT (); // Hello watchdog, we do not have to pay too much attention to this trip
       display_drive (); // Nixie tube driver on the while (1) loop of the main function

   }

}


void display_drive () // Nixie tube driver on the while (1) loop of the main function
{
    if (led_update == 1) // There is data update
    {
        led_update = 0; / / flag clear in time to avoid scanning

        number_temp [0] = number_table [number_left1]; // Load the content to be displayed
        number_temp [1] = number_table [number_left2]; // Load the content to be displayed
        number_temp [2] = number_table [number_left3]; // Load the content to be displayed
        number_temp [3] = number_table [number_left4]; // Load the content to be displayed
        number_temp [4] = number_table [number_left5]; // Load the content to be displayed
        number_temp [5] = number_table [number_left6]; // Load the content to be displayed
        number_temp [6] = number_table [number_left7]; // Load the content to be displayed
        number_temp [7] = number_table [number_left8]; // Load the content to be displayed

        display_tm1639 (const_dig_addr0, number_temp [0], const_level_4); // Display the first digit on the left
        display_tm1639 (const_dig_addr1, number_temp [1], const_level_4); // display the second digit on the left
        display_tm1639 (const_dig_addr2, number_temp [2], const_level_4); // Display the third bit on the left
        display_tm1639 (const_dig_addr3, number_temp [3], const_level_4); // Display the 4th bit on the left
        display_tm1639 (const_dig_addr4, number_temp [4], const_level_4); // display the 5th bit on the left
        display_tm1639 (const_dig_addr5, number_temp [5], const_level_4); // Display the left 6
        display_tm1639 (const_dig_addr6, number_temp [6], const_level_4); // Display the left 7
        display_tm1639 (const_dig_addr7, number_temp [7], const_level_4); // display the eighth bit on the left
    }
}



// Write a byte of data into tm1639
void write_byte_tm1639 (unsigned char tm1639_byte)
{
    unsigned char tm1639_i;

    tm1639_stb_dr = 0; / / stb is low, the program does not depend on the state of the previous port, to avoid "port lost"
    for (tm1639_i = 0; tm1639_i <8; tm1639_i ++)
    {
        tm1639_clk_dr = 0;
        if ((tm1639_byte & 0x01)! = 0)
           tm1639_dio_dr = 1;
        else
           tm1639_dio_dr = 0;
        tm1639_clk_dr = 1;
        tm1639_byte = tm1639_byte >> 1;
    }
}

// Display 8 LED lights or one digital tube at a time
void display_tm1639 (unsigned char dig_addr, unsigned char dig_data, unsigned char dig_level)
{
     tm1639_dio_dr = 1;
     tm1639_clk_dr = 1;
     tm1639_stb_dr = 1;
             

     write_byte_tm1639 (const_auto_add_addr); / / set to automatically add a way
     tm1639_stb_dr = 1;
     write_byte_tm1639 (dig_addr); // Set the displayed bit address


     write_byte_tm1639 (dig_data & 0x0f); / / shows the low 4-bit data, a total of 4 led lights
     write_byte_tm1639 (dig_data >> 4 & 0x0f); / / shows the high 4-bit data, a total of 4 led lights

     tm1639_stb_dr = 1;
     write_byte_tm1639 (dig_level); // Set the brightness of the display
     tm1639_stb_dr = 1;
}
