//white - DIO
//green - CLK
//red - STB
#define PIN_CLK 9
#define PIN_DIO 8
#define PIN_STB 7

const byte DIGIT1[][16] = {
                      { 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0 },//0
                      { 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0 },//1
                      { 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0 },//2
                      { 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0 },//3
                      { 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0 },//4
                      { 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0 },//5
                      { 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0 },//6
                      { 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0 },//7
                      { 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0 },//8
                      { 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0 } //9
                    };
const byte DIGIT2[][16] = {
                      { 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 0, 0, 0, 0 },//0
                      { 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0 },//1
                      { 2, 0, 2, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 0, 0 },//2
                      { 2, 0, 0, 0, 0, 0, 2, 0, 2, 0, 2, 0, 2, 0, 0, 0 },//3
                      { 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 2, 0, 2, 0, 0, 0 },//4
                      { 2, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 2, 0, 0, 0 },//5
                      { 2, 0, 2, 0, 2, 0, 2, 0, 0, 0, 2, 0, 2, 0, 0, 0 },//6
                      { 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 2, 0, 0, 0, 0, 0 },//7
                      { 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 0, 0 },//8
                      { 2, 0, 0, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 0, 0 } //9
                    };                    
const byte DIGIT3[][16] = {
                      { 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 0, 0, 0, 0 },//0
                      { 0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },//1
                      { 4, 0, 4, 0, 0, 0, 4, 0, 4, 0, 0, 0, 4, 0, 0, 0 },//2
                      { 4, 0, 4, 0, 4, 0, 4, 0, 0, 0, 0, 0, 4, 0, 0, 0 },//3
                      { 0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 4, 0, 4, 0, 0, 0 },//4
                      { 4, 0, 0, 0, 4, 0, 4, 0, 0, 0, 4, 0, 4, 0, 0, 0 },//5
                      { 4, 0, 0, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 0, 0 },//6
                      { 4, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },//7
                      { 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 0, 0 },//8
                      { 4, 0, 4, 0, 4, 0, 4, 0, 0, 0, 4, 0, 4, 0, 0, 0 } //9
                    };                    
const byte DIGIT4[][16] = {
                      { 8, 0, 8, 0, 8, 0, 8, 0, 8, 0, 8, 0, 0, 0, 0, 0 },//0
                      { 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 8, 0, 0, 0, 0, 0 },//1
                      { 8, 0, 8, 0, 0, 0, 8, 0, 8, 0, 0, 0, 8, 0, 0, 0 },//2
                      { 8, 0, 0, 0, 0, 0, 8, 0, 8, 0, 8, 0, 8, 0, 0, 0 },//3
                      { 0, 0, 0, 0, 8, 0, 0, 0, 8, 0, 8, 0, 8, 0, 0, 0 },//4
                      { 8, 0, 0, 0, 8, 0, 8, 0, 0, 0, 8, 0, 8, 0, 0, 0 },//5
                      { 8, 0, 8, 0, 8, 0, 8, 0, 0, 0, 8, 0, 8, 0, 0, 0 },//6
                      { 0, 0, 0, 0, 0, 0, 8, 0, 8, 0, 8, 0, 0, 0, 0, 0 },//7
                      { 8, 0, 8, 0, 8, 0, 8, 0, 8, 0, 8, 0, 8, 0, 0, 0 },//8
                      { 8, 0, 0, 0, 8, 0, 8, 0, 8, 0, 8, 0, 8, 0, 0, 0 } //9
                    };                    
const byte DIGIT5[][16] = {
                      { 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0 },//0
                      { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0 },//1
                      { 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0 },//2
                      { 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0 },//3
                      { 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0 },//4
                      { 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0 },//5
                      { 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0 },//6
                      { 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0 },//7
                      { 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0 },//8
                      { 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0 } //9
                    };                    
const byte DIGIT6[][16] = {
                      { 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 0, 0, 0 },//0
                      { 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0 },//1
                      { 0, 2, 0, 2, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 0 },//2
                      { 0, 2, 0, 0, 0, 0, 0, 2, 0, 2, 0, 2, 0, 2, 0, 0 },//3
                      { 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 2, 0, 2, 0, 0 },//4
                      { 0, 2, 0, 0, 0, 2, 0, 2, 0, 0, 0, 2, 0, 2, 0, 0 },//5
                      { 0, 2, 0, 2, 0, 2, 0, 2, 0, 0, 0, 2, 0, 2, 0, 0 },//6
                      { 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 2, 0, 0, 0, 0 },//7
                      { 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 0 },//8
                      { 0, 2, 0, 0, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 0 } //9
                    };                    
const byte DIGIT7[][16] = {
                      { 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 0, 0, 0 },//0
                      { 0, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },//1
                      { 0, 4, 0, 4, 0, 0, 0, 4, 0, 4, 0, 0, 0, 4, 0, 0 },//2
                      { 0, 4, 0, 4, 0, 4, 0, 4, 0, 0, 0, 0, 0, 4, 0, 0 },//3
                      { 0, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 4, 0, 4, 0, 0 },//4
                      { 0, 4, 0, 0, 0, 4, 0, 4, 0, 0, 0, 4, 0, 4, 0, 0 },//5
                      { 0, 4, 0, 0, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 0 },//6
                      { 0, 4, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },//7
                      { 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 0 },//8
                      { 0, 4, 0, 4, 0, 4, 0, 4, 0, 0, 0, 4, 0, 4, 0, 0 } //9
                    };                    
//                      0  1  2  3  4  5  6  7  8  9  10 11 12 13 14 15  
const byte DIGIT8[][16] = {
                      { 0, 8, 0, 8, 0, 8, 0, 8, 0, 8, 0, 8, 0, 0, 0, 0 },//0
                      { 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 8, 0, 0, 0, 0 },//1
                      { 0, 8, 0, 8, 0, 0, 0, 8, 0, 8, 0, 0, 0, 8, 0, 0 },//2
                      { 0, 8, 0, 0, 0, 0, 0, 8, 0, 8, 0, 8, 0, 8, 0, 0 },//3
                      { 0, 0, 0, 0, 0, 8, 0, 0, 0, 8, 0, 8, 0, 8, 0, 0 },//4
                      { 0, 8, 0, 0, 0, 8, 0, 8, 0, 0, 0, 8, 0, 8, 0, 0 },//5
                      { 0, 8, 0, 8, 0, 8, 0, 8, 0, 0, 0, 8, 0, 8, 0, 0 },//6
                      { 0, 0, 0, 0, 0, 0, 0, 8, 0, 8, 0, 8, 0, 0, 0, 0 },//7
                      { 0, 8, 0, 8, 0, 8, 0, 8, 0, 8, 0, 8, 0, 8, 0, 0 },//8
                      { 0, 8, 0, 0, 0, 8, 0, 8, 0, 8, 0, 8, 0, 8, 0, 0 } //9
                    };  

byte ledData[16];


void displayTm1639(byte addr, byte data) {
  sendCommandTm1639(0x44);
  digitalWrite(PIN_STB, LOW);
  writeByteTm1639(0xC0 | addr);
  writeByteTm1639(data);
  digitalWrite(PIN_STB, HIGH);
}

void writeByteTm1639(byte data) {
  byte i;

  for (i = 0; i < 8; i++) {
    digitalWrite(PIN_CLK, LOW);
    digitalWrite(PIN_DIO, ((data & 0x01) != 0) ? HIGH : LOW);
    data = data >> 1;
    digitalWrite(PIN_CLK, HIGH);
  }
}

void sendCommandTm1639(byte data) {
  digitalWrite(PIN_STB, LOW);
  writeByteTm1639(data);
  digitalWrite(PIN_STB, HIGH);
}

void sendDataTm1639(byte data[16]) {
  byte i;
  for (i = 0; i < 16; i++) {
    ledData[i] = ledData[i] | data[i];
    displayTm1639(i, ledData[i]);
  }
}

void clearDisplay() {
  byte i;
  for (i = 0; i < 16; i++) {
    ledData[i] = 0;
    displayTm1639(i, ledData[i]);
  }
}

void showNumber(byte pos, byte number) {
  byte data[16];
  switch (pos) {
    case 1:
      memcpy(data, DIGIT1[number], 16);
      break;
    case 2:
      memcpy(data, DIGIT2[number], 16);
      break;
    case 3:
      memcpy(data, DIGIT3[number], 16);
      break;
    case 4:
      memcpy(data, DIGIT4[number], 16);
      break;
    case 5:
      memcpy(data, DIGIT5[number], 16);
      break;
    case 6:
      memcpy(data, DIGIT6[number], 16);
      break;
    case 7:
      memcpy(data, DIGIT7[number], 16);
      break;
    case 8:
      memcpy(data, DIGIT8[number], 16);
      break;   
  }
  sendDataTm1639(data);
}

void showTimeTicker(boolean isShown) {
  byte data[16] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, isShown ? 6 : 0 };
  sendDataTm1639(data);
}

void showDegreeSign() {
  byte data[16] = { 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0 };
  sendDataTm1639(data);
}

void showHumiditySign() {
  byte data[16] = { 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0 };
  sendDataTm1639(data);
}

void setup() {
  pinMode(PIN_CLK, OUTPUT);
  pinMode(PIN_DIO, OUTPUT);
  pinMode(PIN_STB, OUTPUT);
  digitalWrite(PIN_STB, HIGH);
  digitalWrite(PIN_CLK, HIGH);
  sendCommandTm1639(0x40);
  sendCommandTm1639(0x88 | 7);

  showNumber(2, 2);
  showNumber(3, 2);
  showDegreeSign();

  showNumber(6, 6);
  showNumber(7, 3);
  showHumiditySign();
  
  delay(3000);
  clearDisplay();

  showNumber(1, 5);
  showNumber(2, 3);
  showNumber(3, 2);
  showNumber(4, 1);

  showNumber(5, 7);
  showNumber(6, 2);
  showNumber(7, 4);
  showNumber(8, 1);

  showTimeTicker(true);

}

void loop() {
}
